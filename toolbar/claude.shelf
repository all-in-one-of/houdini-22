<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <shelfSet name="shelf_set_td" label="Technical Director">
    <memberToolshelf name="create"/>
    <memberToolshelf name="modify"/>
    <memberToolshelf name="model"/>
    <memberToolshelf name="polygon"/>
    <memberToolshelf name="deform"/>
    <memberToolshelf name="texture"/>
    <memberToolshelf name="rigging"/>
    <memberToolshelf name="character"/>
    <memberToolshelf name="animation"/>
    <memberToolshelf name="hair"/>
    <memberToolshelf name="grooming"/>
    <memberToolshelf name="cloud"/>
    <memberToolshelf name="volume"/>
    <memberToolshelf name="tdtools"/>
    <memberToolshelf name="athena_shelf"/>
    <memberToolshelf name="claude"/>
    <memberToolshelf name="ABA_Destruction"/>
    <memberToolshelf name="aba_Shelf"/>
    <memberToolshelf name="whHouGo_Shelf"/>
    <memberToolshelf name="shelf_claude"/>
  </shelfSet>

  <toolshelf name="texture" label="Texture">
    <memberTool name="sop_uvproject"/>
    <memberTool name="sop_uvedit"/>
    <memberTool name="sop_uvbrush"/>
    <memberTool name="sop_uvfuse"/>
    <memberTool name="sop_uvflatten"/>
    <memberTool name="sop_uvpelt"/>
    <memberTool name="sop_texture"/>
    <memberTool name="sop_uvtransform"/>
    <memberTool name="sop_uvunwrap"/>
    <memberTool name="sop_uvquickshade"/>
    <memberTool name="generic_cleartexcache"/>
  </toolshelf>

  <toolshelf name="rigging" label="Rigging">
    <memberTool name="object_bones"/>
    <memberTool name="object_bonesfromcurve"/>
    <memberTool name="object_muscle"/>
    <memberTool name="object_pointmuscles"/>
    <memberTool name="object_capturegeometry"/>
    <memberTool name="object_editcaptureregion"/>
    <memberTool name="object_editcaptureweight"/>
    <memberTool name="object_editcaptureblend"/>
    <memberTool name="object_addmuscletosolution"/>
    <memberTool name="object_mirrorcapture"/>
    <memberTool name="object_paintcapturelayer"/>
    <memberTool name="object_aligncapturepose"/>
    <memberTool name="geometry_slidemodifierpaint"/>
    <memberTool name="sop_comb"/>
    <memberTool name="object_pose"/>
  </toolshelf>

  <toolshelf name="tdtools" label="TD Tools">
    <memberTool name="sop_add"/>
    <memberTool name="sop_point"/>
    <memberTool name="sop_vertex"/>
    <memberTool name="sop_attribute"/>
    <memberTool name="sop_attribcreate::2.0"/>
    <memberTool name="sop_attribmirror"/>
    <memberTool name="sop_attribpromote"/>
    <memberTool name="sop_attribtransfer"/>
    <memberTool name="sop_partition"/>
    <memberTool name="sop_connectivity"/>
    <memberTool name="sop_object_merge"/>
    <memberTool name="sop_measure"/>
    <memberTool name="sop_cache"/>
    <memberTool name="sop_trail"/>
    <memberTool name="sop_paint"/>
  </toolshelf>

  <toolshelf name="character" label="Character">
    <memberTool name="object_simplebiped"/>
    <memberTool name="object_mocapbiped1"/>
    <memberTool name="object_mocapbiped2"/>
  </toolshelf>

  <toolshelf name="animation" label="Animation">
    <memberTool name="object_pose"/>
    <memberTool name="object_parent"/>
    <memberTool name="object_dynamicparent"/>
    <memberTool name="object_blendpose"/>
    <memberTool name="object_centerpivot"/>
    <memberTool name="object_parentblend"/>
    <memberTool name="dop_parentconstraint"/>
    <memberTool name="object_lookat"/>
    <memberTool name="object_followpath"/>
    <memberTool name="object_lagobject"/>
    <memberTool name="object_jiggleobject"/>
  </toolshelf>

  <toolshelf name="grooming" label="Grooming">
    <memberTool name="object_drawhairguides"/>
    <memberTool name="object_plantguides"/>
    <memberTool name="object_reguide"/>
    <memberTool name="object_groomhairinscreen"/>
    <memberTool name="object_groomhairalongsurface"/>
    <memberTool name="object_groomliftbrush"/>
    <memberTool name="object_groomclumpbrush"/>
    <memberTool name="object_groompartbrush"/>
    <memberTool name="object_groomadjustlength"/>
    <memberTool name="object_groomsmooth"/>
    <memberTool name="object_groomcuthair"/>
    <memberTool name="object_groomextendhair"/>
  </toolshelf>

  <toolshelf name="hair" label="Hair">
    <memberTool name="object_addfur"/>
    <memberTool name="object_addparting"/>
    <memberTool name="object_paintfurdensity"/>
    <memberTool name="object_paintfurthickness"/>
    <memberTool name="object_paintbasecolor"/>
    <memberTool name="object_paintfurfrizz"/>
    <memberTool name="object_paintfurfrizzfrequency"/>
    <memberTool name="object_paintfurfrizzroughness"/>
    <memberTool name="object_paintfurclumping"/>
    <memberTool name="object_paintwhitehairdensity"/>
    <memberTool name="object_paintguardhairdensity"/>
    <memberTool name="object_paintguardhairlength"/>
    <memberTool name="object_furdynamics"/>
  </toolshelf>

  <toolshelf name="whHouGo_Shelf" label="whHouGo">
    <memberTool name="whHouGo_JustSave"/>
    <memberTool name="whHouGo_MinorUp"/>
    <memberTool name="whHouGo_MajorUp"/>
    <memberTool name="Spacer"/>
    <memberTool name="whHouGo_Restore"/>
    <memberTool name="whHouGo_Link"/>
    <memberTool name="whHouGo_SanityCheck"/>
    <memberTool name="Spacer2"/>
    <memberTool name="whHouGo_Lock"/>
    <memberTool name="whHouGo_Unlock"/>
    <memberTool name="Spacer3"/>
    <memberTool name="whHouGo_FlipBook"/>
  </toolshelf>

  <toolshelf name="create" label="Create">
    <memberTool name="geometry_box"/>
    <memberTool name="geometry_sphere"/>
    <memberTool name="geometry_tube"/>
    <memberTool name="geometry_torus"/>
    <memberTool name="geometry_grid"/>
    <memberTool name="sop_metaball"/>
    <memberTool name="sop_lsystem"/>
    <memberTool name="geometry_platonic"/>
    <memberTool name="sop_curve"/>
    <memberTool name="geometry_spraypaint"/>
    <memberTool name="geometry_drawcurve"/>
    <memberTool name="geometry_circle"/>
    <memberTool name="sop_font"/>
    <memberTool name="sop_file"/>
    <memberTool name="object_null"/>
    <memberTool name="object_rivet"/>
    <memberTool name="object_sticky"/>
  </toolshelf>

  <toolshelf name="modify" label="Modify">
    <memberTool name="object_combine"/>
    <memberTool name="geometry_extract"/>
    <memberTool name="geometry_mirror"/>
    <memberTool name="geometry_copy"/>
    <memberTool name="geometry_duplicate"/>
    <memberTool name="object_centerpivot"/>
    <memberTool name="object_freeze"/>
    <memberTool name="generic_delete"/>
    <memberTool name="generic_hide"/>
    <memberTool name="object_parent"/>
    <memberTool name="object_parentblend"/>
    <memberTool name="object_dynamicparent"/>
    <memberTool name="object_blendpose"/>
    <memberTool name="object_lookat"/>
    <memberTool name="object_followpath"/>
  </toolshelf>

  <toolshelf name="model" label="Model">
    <memberTool name="sop_revolve"/>
    <memberTool name="geometry_loft"/>
    <memberTool name="sop_skin"/>
    <memberTool name="sop_rails"/>
    <memberTool name="sop_sweep"/>
    <memberTool name="sop_creep"/>
    <memberTool name="sop_ray"/>
    <memberTool name="geometry_boolean"/>
    <memberTool name="sop_break"/>
    <memberTool name="geometry_voronoifracture"/>
    <memberTool name="sop_carve"/>
    <memberTool name="sop_convert"/>
    <memberTool name="sop_refine"/>
    <memberTool name="sop_reverse"/>
    <memberTool name="sop_sculpt"/>
    <memberTool name="sop_scatter::2.0"/>
    <memberTool name="sop_clusterpoints"/>
    <memberTool name="sop_group"/>
    <memberTool name="sop_visibility"/>
  </toolshelf>

  <toolshelf name="polygon" label="Polygon">
    <memberTool name="sop_polyextrude"/>
    <memberTool name="sop_polyknit"/>
    <memberTool name="sop_polybevel"/>
    <memberTool name="sop_polysplit"/>
    <memberTool name="sop_edgeloop"/>
    <memberTool name="sop_polyreduce"/>
    <memberTool name="sop_polycap"/>
    <memberTool name="sop_edgecollapse"/>
    <memberTool name="sop_edgecusp"/>
    <memberTool name="sop_edgeflip"/>
    <memberTool name="sop_edgedivide"/>
    <memberTool name="sop_dissolve"/>
    <memberTool name="sop_knife"/>
    <memberTool name="sop_clip"/>
    <memberTool name="sop_subdivide"/>
    <memberTool name="sop_facet"/>
    <memberTool name="sop_fuse"/>
    <memberTool name="sop_smooth"/>
  </toolshelf>

  <toolshelf name="deform" label="Deform">
    <memberTool name="sop_twist"/>
    <memberTool name="geometry_bend"/>
    <memberTool name="geometry_taper"/>
    <memberTool name="geometry_lineartaper"/>
    <memberTool name="geometry_squashstretch"/>
    <memberTool name="sop_bulge"/>
    <memberTool name="sop_lattice"/>
    <memberTool name="sop_fractal"/>
    <memberTool name="sop_mountain"/>
    <memberTool name="geometry_waves"/>
    <memberTool name="sop_ripple"/>
    <memberTool name="sop_waveform"/>
    <memberTool name="object_morph"/>
  </toolshelf>

  <toolshelf name="cloud" label="Cloud FX">
    <memberTool name="cloud_create"/>
    <memberTool name="sop_cloud"/>
    <memberTool name="sop_cloudnoise"/>
    <memberTool name="cloud_light"/>
    <memberTool name="sky_rig"/>
  </toolshelf>

  <toolshelf name="volume" label="Volume">
    <memberTool name="geometry_fogvolume"/>
    <memberTool name="geometry_vdbfrompolygons"/>
    <memberTool name="geometry_vdbfromparticles"/>
    <memberTool name="geometry_paintcolorvolume"/>
    <memberTool name="geometry_paintfogvolume"/>
    <memberTool name="geometry_paintsdfvolume"/>
    <memberTool name="geometry_volumerasterizepoints"/>
    <memberTool name="geometry_volumerasterizeparticles"/>
    <memberTool name="geometry_volumerasterizecurve"/>
    <memberTool name="geometry_convertvdb"/>
  </toolshelf>

  <tool name="csSmoke" label="csSmoke" icon="SHELF_smoke_heavy">
    <toolMenuContext name="network">
      <contextOpType>Sop/primitive</contextOpType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputnode = None
inputindex = -1
inputnode = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputnode = pane_node.node(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputnode = pane_node.node(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None
    if not autoplace and not pane.autoPlaceNodes() and not pane.listMode():
        if pos is not None:
            pass
        elif outputnode is None:
            pos = pane.selectPosition(inputnode, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputnode, outputindex,
                                      outputnode, inputindex)
    if pos is None and pane.autoPlaceNodes():
        pos = pane.cursorPosition()
        
    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('dopnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script: Tuesday July 07, 12:30 2015
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo_smoke_primitive_hide_all_but_density1 (Sop/primitive)
set _obj_geo_smoke_primitive_hide_all_but_density1 = `run("opadd -e -n -v primitive primitive_hide_all_but_density1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo_smoke_primitive_hide_all_but_density1
chblockbegin
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 px
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEX' $_obj_geo_smoke_primitive_hide_all_but_density1/px
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 py
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEY' $_obj_geo_smoke_primitive_hide_all_but_density1/py
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 pz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CEZ' $_obj_geo_smoke_primitive_hide_all_but_density1/pz
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 upvectorx
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$NX' $_obj_geo_smoke_primitive_hide_all_but_density1/upvectorx
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 upvectory
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$NY' $_obj_geo_smoke_primitive_hide_all_but_density1/upvectory
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 upvectorz
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$NZ' $_obj_geo_smoke_primitive_hide_all_but_density1/upvectorz
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 diffr
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$CR' $_obj_geo_smoke_primitive_hide_all_but_density1/diffr
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 diffg
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$CG' $_obj_geo_smoke_primitive_hide_all_but_density1/diffg
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 diffb
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$CB' $_obj_geo_smoke_primitive_hide_all_but_density1/diffb
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 alpha
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$CA' $_obj_geo_smoke_primitive_hide_all_but_density1/alpha
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 crease
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$CREASE' $_obj_geo_smoke_primitive_hide_all_but_density1/crease
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 metaweight
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$WEIGHT' $_obj_geo_smoke_primitive_hide_all_but_density1/metaweight
chadd -t 0 0 $_obj_geo_smoke_primitive_hide_all_but_density1 prblur
chkey -t 0 -v 0.033333333333333333 -m 0 -a 0 -A 0 -T a  -F '1/$FPS' $_obj_geo_smoke_primitive_hide_all_but_density1/prblur
chblockend
opparm -V 14.0.379 $_obj_geo_smoke_primitive_hide_all_but_density1 group ( '@name=temperature @name=vel.*' ) stdswitcher ( 5 5 5 5 5 5 ) dovolvis ( on ) volvis ( invisible )
opcolor -c 0 0.80000001192092896 1 $_obj_geo_smoke_primitive_hide_all_but_density1
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_primitive_hide_all_but_density1
opexprlanguage -s hscript $_obj_geo_smoke_primitive_hide_all_but_density1
opuserdata -n '___Version___' -v '14.0.379' $_obj_geo_smoke_primitive_hide_all_but_density1
opset -p on $_obj_geo_smoke_primitive_hide_all_but_density1
opcf $arg1

# Node $_obj_geo_smoke_bound_limits1 (Sop/bound)
set _obj_geo_smoke_bound_limits1 = `run("opadd -e -n -v bound bound_limits1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 2.0691900253295898` $_obj_geo_smoke_bound_limits1
chblockbegin
chadd -t -0.041666666666666664 -0.041666666666666664 $_obj_geo_smoke_bound_limits1 minpady
chkey -t -0.041666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("minpadx")' $_obj_geo_smoke_bound_limits1/minpady
chadd -t -0.041666666666666664 -0.041666666666666664 $_obj_geo_smoke_bound_limits1 minpadz
chkey -t -0.041666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("minpadx")' $_obj_geo_smoke_bound_limits1/minpadz
chadd -t -0.041666666666666664 -0.041666666666666664 $_obj_geo_smoke_bound_limits1 maxpadx
chkey -t -0.041666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("minpadx")' $_obj_geo_smoke_bound_limits1/maxpadx
chadd -t -0.041666666666666664 -0.041666666666666664 $_obj_geo_smoke_bound_limits1 maxpadz
chkey -t -0.041666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("minpadx")' $_obj_geo_smoke_bound_limits1/maxpadz
chblockend
opparm -V 14.0.379 $_obj_geo_smoke_bound_limits1 minpad ( 1 minpady minpadz ) maxpad ( maxpadx 4 maxpadz )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_bound_limits1
opexprlanguage -s hscript $_obj_geo_smoke_bound_limits1
opuserdata -n '___Version___' -v '14.0.379' $_obj_geo_smoke_bound_limits1
opset -p on $_obj_geo_smoke_bound_limits1
opcf $arg1

# Node $_obj_geo_smoke_fluidsource2 (Sop/fluidsource)
set _obj_geo_smoke_fluidsource2 = `run("opadd -e -n -v fluidsource fluidsource2")`
oplocate -x `$arg2 + -1.4673995971679688` -y `$arg3 + 3.0357599258422852` $_obj_geo_smoke_fluidsource2
opparm $_obj_geo_smoke_fluidsource2  number_of_volumes ( 2 ) feather_in_ramp ( 2 ) feather_out_ramp ( 2 ) vel_number_of_volumes ( 1 ) vel_vortexramp ( 3 )
chblockbegin
chadd -t 0 0 $_obj_geo_smoke_fluidsource2 vel_divsize
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(\'./divsize\')' $_obj_geo_smoke_fluidsource2/vel_divsize
chadd -t 0 0 $_obj_geo_smoke_fluidsource2 vel_objframe
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FF-0.5' $_obj_geo_smoke_fluidsource2/vel_objframe
chblockend
opparm $_obj_geo_smoke_fluidsource2 number_of_volumes ( 2 ) settings ( 5 5 5 5 5 5 5 ) feather_in_ramp2pos ( 1 ) feather_in_ramp2value ( 1 ) feather_out_ramp2pos ( 1 ) feather_out_ramp2value ( 1 ) vel_vortexramp2pos ( 0.5 ) vel_vortexramp2value ( 1 ) vel_vortexramp3pos ( 1 ) volvis2 ( slice ) name2 ( temperature )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_fluidsource2
opexprlanguage -s hscript $_obj_geo_smoke_fluidsource2
opuserdata -n '___Version___' -v '' $_obj_geo_smoke_fluidsource2
opuserdata -n '___toolcount___' -v '3' $_obj_geo_smoke_fluidsource2
opuserdata -n '___toolid___' -v 'dynamics_burnsource' $_obj_geo_smoke_fluidsource2
opset -p on $_obj_geo_smoke_fluidsource2
opcf $arg1

# Node $_obj_geo_smoke_sphere2 (Sop/sphere)
set _obj_geo_smoke_sphere2 = `run("opadd -e -n -v sphere sphere2")`
oplocate -x `$arg2 + -1.4673995971679688` -y `$arg3 + 4.0206999778747559` $_obj_geo_smoke_sphere2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_sphere2
opexprlanguage -s hscript $_obj_geo_smoke_sphere2
opuserdata -n '___Version___' -v '14.0.379' $_obj_geo_smoke_sphere2
opset -p on $_obj_geo_smoke_sphere2
opcf $arg1

# Node $_obj_geo_smoke_dopnet_smoke1 (Sop/dopnet)
set _obj_geo_smoke_dopnet_smoke1 = `run("opadd -e -n -v dopnet dopnet_smoke1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0.82793998718261719` $_obj_geo_smoke_dopnet_smoke1
opparm $_obj_geo_smoke_dopnet_smoke1  numobj ( 3 )
chblockbegin
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1 timestep
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("timescale")/(ch("substep")*$FPS)' $_obj_geo_smoke_dopnet_smoke1/timestep
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1 timeoffset
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '(ch("startframe")-1)/$FPS' $_obj_geo_smoke_dopnet_smoke1/timeoffset
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1 startframe
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$SFRAME' $_obj_geo_smoke_dopnet_smoke1/startframe
chblockend
opparm -V 14.0.379 $_obj_geo_smoke_dopnet_smoke1 stdswitcher ( 1 1 1 ) numobj ( 3 ) startframe ( startframe ) objname1 ( * ) dataname1 ( density ) enable2 ( off ) objname2 ( * ) dataname2 ( temperature ) objname3 ( * ) dataname3 ( vel )
opcolor -c 1 1 1 $_obj_geo_smoke_dopnet_smoke1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1
opuserdata -n '___Version___' -v '14.0.379' $_obj_geo_smoke_dopnet_smoke1
opcf $_obj_geo_smoke_dopnet_smoke1

# Node $_obj_geo_smoke_dopnet_smoke1_pyrosolver1 (Dop/pyrosolver::2.0)
set _obj_geo_smoke_dopnet_smoke1_pyrosolver1 = `run("opadd -e -n -v pyrosolver::2.0 pyrosolver1")`
oplocate -x `$arg2 + 6.5683999999999996` -y `$arg3 + 0.0026041300000000001` $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opparm $_obj_geo_smoke_dopnet_smoke1_pyrosolver1  remap_cooldown_time ( 2 ) remap_dissipation_field ( 4 ) dist_control_field_ramp ( 2 ) control_field_ramp ( 2 ) turb_control_ramp ( 2 ) conf_control_field_ramp2 ( 5 )
opparm $_obj_geo_smoke_dopnet_smoke1_pyrosolver1 combustion_1 ( 2 2 2 2 2 ) temp_diffusion ( 0.20000000000000001 ) cooling_rate ( 0.59999999999999998 ) lift ( 2 ) enable_combustion ( off ) evap ( 0.074999999999999997 ) enable_disturbance ( on ) dist_scale ( 0.21249999999999999 ) enable_turbulence ( on ) turbulence_scale ( 0.25 ) confinementscale ( 4 ) wind_2 ( 4 4 4 4 4 4 ) dissipation_control_range ( 0 2 ) dist_density_cutoff ( 0.10000000000000001 ) dist_block_size ( 0.14999999999999999 ) dist_use_control_field ( on ) dist_control_field ( temperature ) dist_control_influence ( 1 ) dist_control_range ( 0 0.050000000000000003 ) turb_swirl_size ( 0.75 ) turb_turb ( 3 ) turb_control_influence ( 1 ) turb_guidestreamerlen ( 1 ) conf_use_control_field ( on ) conf_control_field ( density ) conf_remap_control_field ( on ) conf_control_influence ( 0.75 ) conf_control_field_ramp2 ( 5 ) std_switcher_0_6 ( 1 1 1 1 ) wind_6 ( 2 2 2 2 2 2 2 ) scaled_forces ( '* ^Gravity' ) remap_cooldown_time1value ( 1 ) remap_cooldown_time2pos ( 1 ) remap_cooldown_time2value ( 0.10000000149011612 ) remap_dissipation_field1value ( 1 ) remap_dissipation_field1interp ( catmull-rom ) remap_dissipation_field2pos ( 0.17888999999999999 ) remap_dissipation_field2value ( 0.875 ) remap_dissipation_field2interp ( catmull-rom ) remap_dissipation_field3pos ( 0.36799999999999999 ) remap_dissipation_field3value ( 0.27000000000000002 ) remap_dissipation_field3interp ( catmull-rom ) remap_dissipation_field4pos ( 1 ) remap_dissipation_field4interp ( catmull-rom ) dist_control_field_ramp2pos ( 1 ) dist_control_field_ramp2value ( 1 ) control_field_ramp2pos ( 1 ) control_field_ramp2value ( 1 ) turb_control_ramp2pos ( 1 ) turb_control_ramp2value ( 1 ) conf_control_field_ramp2_1interp ( catmull-rom ) conf_control_field_ramp2_2pos ( 0.059999999999999998 ) conf_control_field_ramp2_2value ( 0.75 ) conf_control_field_ramp2_2interp ( catmull-rom ) conf_control_field_ramp2_3pos ( 0.14999999999999999 ) conf_control_field_ramp2_3value ( 0.92500000000000004 ) conf_control_field_ramp2_3interp ( catmull-rom ) conf_control_field_ramp2_4pos ( 0.90000000000000002 ) conf_control_field_ramp2_4value ( 0.29999999999999999 ) conf_control_field_ramp2_4interp ( catmull-rom ) conf_control_field_ramp2_5pos ( 1 ) conf_control_field_ramp2_5interp ( catmull-rom )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opuserdata -n '___Version___' -v '' $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opuserdata -n '___toolcount___' -v '2' $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opuserdata -n '___toolid___' -v 'dynamics_pyrobox' $_obj_geo_smoke_dopnet_smoke1_pyrosolver1

# Node $_obj_geo_smoke_dopnet_smoke1_smoke (Dop/smokeobject)
set _obj_geo_smoke_dopnet_smoke1_smoke = `run("opadd -e -n -v smokeobject smoke")`
oplocate -x `$arg2 + 4.1209300000000004` -y `$arg3 + 1.8851` $_obj_geo_smoke_dopnet_smoke1_smoke
opparm $_obj_geo_smoke_dopnet_smoke1_smoke  multifield_densityramp ( 2 ) multifield_cdramp ( 2 ) multifield_emitramp ( 2 ) multifield_emitcdramp ( 4 )
chblockbegin
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke sizex
chkey -t 0 -v 3.5 -m 0 -a 0 -A 0 -T a  -F 'bbox(opinputpath("..",0), D_XSIZE)' $_obj_geo_smoke_dopnet_smoke1_smoke/sizex
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke sizey
chkey -t 0 -v 5 -m 0 -a 0 -A 0 -T a  -F 'bbox(opinputpath("..",0), D_YSIZE)' $_obj_geo_smoke_dopnet_smoke1_smoke/sizey
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke sizez
chkey -t 0 -v 3.5 -m 0 -a 0 -A 0 -T a  -F 'bbox(opinputpath("..",0), D_ZSIZE)' $_obj_geo_smoke_dopnet_smoke1_smoke/sizez
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke tx
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'centroid(opinputpath("..",0), D_X)' $_obj_geo_smoke_dopnet_smoke1_smoke/tx
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke ty
chkey -t 0 -v 1.5 -m 0 -a 0 -A 0 -T a  -F 'centroid(opinputpath("..",0), D_Y)' $_obj_geo_smoke_dopnet_smoke1_smoke/ty
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke tz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'centroid(opinputpath("..",0), D_Z)' $_obj_geo_smoke_dopnet_smoke1_smoke/tz
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke createframe
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(opcreator(".")+"/startframe")' $_obj_geo_smoke_dopnet_smoke1_smoke/createframe
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke size_unit_compx
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("./divsize")- ((ch("./sizex")+ch("./tx"))%ch("./divsize"))' $_obj_geo_smoke_dopnet_smoke1_smoke/size_unit_compx
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke size_unit_compy
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("./divsize")- ((ch("./sizey")+ch("./ty"))%ch("./divsize"))' $_obj_geo_smoke_dopnet_smoke1_smoke/size_unit_compy
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_smoke size_unit_compz
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch("./divsize")- ((ch("./sizez")+ch("./tz"))%ch("./divsize"))' $_obj_geo_smoke_dopnet_smoke1_smoke/size_unit_compz
chblockend
opparm $_obj_geo_smoke_dopnet_smoke1_smoke divsize ( 0.10000000000000001 ) size ( sizex sizey sizez ) t ( tx ty tz ) solvefirstframe ( on ) multifield_showguide ( on ) density_showguide ( off ) multifield_usebox ( on ) multifield_useboxhash ( on ) multifield_rangemax ( 0.5 ) multifield_densityscale ( 4 ) multifield_shadowscale ( 0.5 ) multifield_densityfield ( density ) multifield_emitscale ( 5 ) multifield_emitfield ( temperature ) multifield_emitcdfield ( heat ) multifield_emitcdrangeoverride ( on ) multifield_emitcdrange ( 0 2 ) multifield_emitcdpreset ( blackbody ) multifield_densityramp2pos ( 1 ) multifield_densityramp2value ( 1 ) multifield_cdramp2pos ( 1 ) multifield_cdramp2c ( 1 1 1 ) multifield_emitramp2pos ( 1 ) multifield_emitramp2value ( 1 ) multifield_emitcdramp1interp ( catmull-rom ) multifield_emitcdramp2pos ( 0.54000000000000004 ) multifield_emitcdramp2c ( 1 0.432 0 ) multifield_emitcdramp2interp ( catmull-rom ) multifield_emitcdramp3pos ( 0.89300000000000002 ) multifield_emitcdramp3c ( 1 0.88329999999999997 0 ) multifield_emitcdramp3interp ( catmull-rom ) multifield_emitcdramp4pos ( 1 ) multifield_emitcdramp4c ( 1 1 1 ) multifield_emitcdramp4interp ( catmull-rom )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1_smoke
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1_smoke
opuserdata -n '___Version___' -v '' $_obj_geo_smoke_dopnet_smoke1_smoke
opuserdata -n '___toolcount___' -v '2' $_obj_geo_smoke_dopnet_smoke1_smoke
opuserdata -n '___toolid___' -v 'dynamics_smokebox' $_obj_geo_smoke_dopnet_smoke1_smoke

# Node $_obj_geo_smoke_dopnet_smoke1_resize_container (Dop/gasresizefluiddynamic)
set _obj_geo_smoke_dopnet_smoke1_resize_container = `run("opadd -e -n -v gasresizefluiddynamic resize_container")`
oplocate -x `$arg2 + 6.3801300000000003` -y `$arg3 + 1.4333` $_obj_geo_smoke_dopnet_smoke1_resize_container
opparm $_obj_geo_smoke_dopnet_smoke1_resize_container folder0_1 ( 1 1 ) bound_padding ( 0.20000000000000001 ) weighted ( off ) field ( 1 1 ) bound_mode ( 0 ) operator_path ( '`opinputpath("..",1)`' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1_resize_container
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1_resize_container
opuserdata -n '___Version___' -v '' $_obj_geo_smoke_dopnet_smoke1_resize_container
opuserdata -n '___toolcount___' -v '1' $_obj_geo_smoke_dopnet_smoke1_resize_container
opuserdata -n '___toolid___' -v 'dynamics_smokebox' $_obj_geo_smoke_dopnet_smoke1_resize_container

# Node $_obj_geo_smoke_dopnet_smoke1_source_density (Dop/sourcevolume)
set _obj_geo_smoke_dopnet_smoke1_source_density = `run("opadd -e -n -v sourcevolume source_density")`
oplocate -x `$arg2 + 9.2041299999999993` -y `$arg3 + 2.1110000000000002` $_obj_geo_smoke_dopnet_smoke1_source_density
opparm $_obj_geo_smoke_dopnet_smoke1_source_density source_path ( '`opinputpath("..",0)`' ) velocity_merge ( add ) vel_mask ( density )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1_source_density
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1_source_density
opuserdata -n '___Version___' -v '' $_obj_geo_smoke_dopnet_smoke1_source_density
opuserdata -n '___toolcount___' -v '3' $_obj_geo_smoke_dopnet_smoke1_source_density
opuserdata -n '___toolid___' -v 'dynamics_burnsource' $_obj_geo_smoke_dopnet_smoke1_source_density
opcf ..
opcf $_obj_geo_smoke_dopnet_smoke1

# Node $_obj_geo_smoke_dopnet_smoke1_OUTPUT (Dop/output)
set _obj_geo_smoke_dopnet_smoke1_OUTPUT = `run("opadd -e -n -v output OUTPUT")`
oplocate -x `$arg2 + 6.5683999999999996` -y `$arg3 + -2.0532699999999999` $_obj_geo_smoke_dopnet_smoke1_OUTPUT
chblockbegin
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_OUTPUT f1
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FSTART' $_obj_geo_smoke_dopnet_smoke1_OUTPUT/f1
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_OUTPUT f2
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_obj_geo_smoke_dopnet_smoke1_OUTPUT/f2
chblockend
opcolor -c 0.40000000596046448 1 0.40000000596046448 $_obj_geo_smoke_dopnet_smoke1_OUTPUT
opset -d on -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1_OUTPUT
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1_OUTPUT
opuserdata -n '___Version___' -v '' $_obj_geo_smoke_dopnet_smoke1_OUTPUT
opuserdata -n '___toolcount___' -v '2' $_obj_geo_smoke_dopnet_smoke1_OUTPUT
opuserdata -n '___toolid___' -v 'pyro_billowysmoke' $_obj_geo_smoke_dopnet_smoke1_OUTPUT

# Node $_obj_geo_smoke_dopnet_smoke1_merge2 (Dop/merge)
set _obj_geo_smoke_dopnet_smoke1_merge2 = `run("opadd -e -n -v merge merge2")`
oplocate -x `$arg2 + 9.2041299999999993` -y `$arg3 + 0.98150400000000004` $_obj_geo_smoke_dopnet_smoke1_merge2
chblockbegin
chadd -t 0 0 $_obj_geo_smoke_dopnet_smoke1_merge2 activation
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'constant()' $_obj_geo_smoke_dopnet_smoke1_merge2/activation
chblockend
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -c off -e on -b off $_obj_geo_smoke_dopnet_smoke1_merge2
opexprlanguage -s hscript $_obj_geo_smoke_dopnet_smoke1_merge2
opuserdata -n '___Version___' -v '14.0.379' $_obj_geo_smoke_dopnet_smoke1_merge2
opuserdata -n '___toolcount___' -v '2' $_obj_geo_smoke_dopnet_smoke1_merge2
opuserdata -n '___toolid___' -v 'pyro_billowysmoke' $_obj_geo_smoke_dopnet_smoke1_merge2
oporder -e pyrosolver1 smoke resize_container source_density OUTPUT merge2 
opcf ..
opset -p on $_obj_geo_smoke_dopnet_smoke1

opcf $arg1
opwire -n $_obj_geo_smoke_dopnet_smoke1 -0 $_obj_geo_smoke_primitive_hide_all_but_density1
opcf $arg1
opwire -n $_obj_geo_smoke_fluidsource2 -0 $_obj_geo_smoke_bound_limits1
opcf $arg1
opwire -n $_obj_geo_smoke_sphere2 -0 $_obj_geo_smoke_fluidsource2
opcf $arg1
opcf $arg1
opwire -n $_obj_geo_smoke_fluidsource2 -0 $_obj_geo_smoke_dopnet_smoke1
opwire -n $_obj_geo_smoke_bound_limits1 -1 $_obj_geo_smoke_dopnet_smoke1
opcf $_obj_geo_smoke_dopnet_smoke1
opwire -n $_obj_geo_smoke_dopnet_smoke1_smoke -0 $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opwire -n $_obj_geo_smoke_dopnet_smoke1_resize_container -1 $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opwire -n $_obj_geo_smoke_dopnet_smoke1_merge2 -4 $_obj_geo_smoke_dopnet_smoke1_pyrosolver1
opwire -n $_obj_geo_smoke_dopnet_smoke1_pyrosolver1 -0 $_obj_geo_smoke_dopnet_smoke1_OUTPUT
opwire -n $_obj_geo_smoke_dopnet_smoke1_source_density -0 $_obj_geo_smoke_dopnet_smoke1_merge2
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo_smoke_dopnet_smoke1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo_smoke_primitive_hide_all_but_density1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="sop_paint" label="Paint" icon="SOP_paint">
    <helpURL>operator:Sop/paint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/paint</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'paint')]]></script>
  </tool>

  <tool name="sop_comb" label="Comb" icon="SOP_comb">
    <helpURL>operator:Sop/comb</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/comb</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'comb')]]></script>
  </tool>

  <tool name="sop_uvbrush" label="UV Brush" icon="SOP_uvbrush">
    <helpURL>operator:Sop/uvbrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvbrush</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvbrush')]]></script>
  </tool>

  <tool name="sop_sculpt" label="Sculpt" icon="SOP_sculpt">
    <helpURL>operator:Sop/sculpt</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sculpt</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'sculpt')]]></script>
  </tool>

  <tool name="sop_polyknit" label="PolyKnit" icon="SOP_polyknit">
    <helpURL>operator:Sop/polyknit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyknit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polyknit')]]></script>
  </tool>

  <tool name="sop_lattice" label="Lattice" icon="SOP_lattice">
    <helpURL>operator:Sop/lattice</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/lattice</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Character</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'lattice')]]></script>
  </tool>

  <tool name="sop_polysplit" label="PolySplit" icon="SOP_polysplit">
    <helpURL>operator:Sop/polysplit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polysplit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'polysplit')]]></script>
  </tool>

  <tool name="sop_edgeloop" label="Edge Loop" icon="SHELF_edgeloop">
    <helpURL>operator:sop_state/edgeloop</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'edgeloop')]]></script>
  </tool>

  <tool name="sop_smooth" label="Smooth" icon="SOP_smooth">
    <helpURL>operator:Sop/smooth</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/smooth</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'smooth')]]></script>
  </tool>

  <tool name="sop_uvedit" label="UV Edit" icon="SOP_uvedit">
    <helpURL>operator:Sop/uvedit</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvedit</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvedit')]]></script>
  </tool>

  <tool name="sop_uvflatten" label="UV Flatten" icon="SOP_uvflatten">
    <helpURL>operator:Sop/uvflatten</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvflatten</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvflatten')]]></script>
  </tool>

  <tool name="sop_uvfuse" label="UV Fuse" icon="SOP_uvfuse">
    <helpURL>operator:Sop/uvfuse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvfuse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvfuse')]]></script>
  </tool>

  <tool name="sop_uvpelt" label="UV Pelt" icon="SOP_uvpelt">
    <helpURL>operator:Sop/uvpelt</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvpelt</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvpelt')]]></script>
  </tool>

  <tool name="sop_uvtransform" label="UV Transform" icon="SOP_uvtransform">
    <helpURL>operator:Sop/uvtransform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvtransform</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.customStateTool(kwargs, 'uvtransform')]]></script>
  </tool>

  <tool name="cs" label="cs" icon="SOP_wiretransfershape">
    <script scriptType="python"><![CDATA[
import cstools

reload(cstools)
reload(cstools.std)
reload(cstools.alt)
reload(cstools.colors)


cstools.run()
]]></script>
    <keywordList>
      <keyword>CSALT</keyword>
    </keywordList>
  </tool>

  <tool name="csToggleColorSettings" label="csToggleColorSettings" icon="COP2_lookup">
    <script scriptType="python"><![CDATA[
if hou.hscript("colorsettings -D -p")[0].split('\n')[2].split('=')[1].strip()== '""':
    hou.hscript('colorsettings -A -p -v -f -g 1 -l "/vol/weta/luts/DigiSX_houdini.lut"')
else:
    hou.hscript('colorsettings -A -p -v -f -g 1 -l ""')
]]></script>
  </tool>

  <tool name="sop_clusterpoints" label="Cluster Points" icon="SOP_clusterpoints">
    <helpURL>operator:Sop/clusterpoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/clusterpoints</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'clusterpoints')]]></script>
  </tool>

  <tool name="sop_cloud" label="Cloud" icon="SOP_cloud">
    <helpURL>operator:Sop/cloud</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cloud</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cloud')]]></script>
  </tool>

  <tool name="sop_cloudnoise" label="Cloud Noise" icon="SOP_cloudnoise">
    <helpURL>operator:Sop/cloudnoise</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cloudnoise</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Volume</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cloudnoise')]]></script>
  </tool>

  <tool name="sop_polybevel" label="PolyBevel" icon="SOP_polybevel">
    <helpURL>operator:Sop/polybevel</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polybevel</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polybevel')]]></script>
  </tool>

  <tool name="sop_rails" label="Rails" icon="SOP_rails">
    <helpURL>operator:Sop/rails</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/rails</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'rails')]]></script>
  </tool>

  <tool name="sop_attribcreate::2.0" label="Attribute Create" icon="SOP_attribcreate-2.0">
    <helpURL>operator:Sop/attribcreate::2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribcreate::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribcreate::2.0')]]></script>
  </tool>

  <tool name="sop_scatter::2.0" label="Scatter" icon="SOP_scatter-2.0">
    <helpURL>operator:Sop/scatter::2.0</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/scatter::2.0</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Particle</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'scatter::2.0')]]></script>
  </tool>

  <tool name="sop_ray" label="Ray" icon="SOP_ray">
    <helpURL>operator:Sop/ray</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ray</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'ray')]]></script>
  </tool>

  <tool name="sop_mountain" label="Mountain" icon="SOP_mountain">
    <helpURL>operator:Sop/mountain</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/mountain</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'mountain')]]></script>
  </tool>

  <tool name="sop_partition" label="Partition" icon="SOP_partition">
    <helpURL>operator:Sop/partition</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/partition</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'partition')]]></script>
  </tool>

  <tool name="sop_attribmirror" label="Attribute Mirror" icon="SOP_attribmirror">
    <helpURL>operator:Sop/attribmirror</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribmirror</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribmirror')]]></script>
  </tool>

  <tool name="sop_polycap" label="PolyCap" icon="SOP_polycap">
    <helpURL>operator:Sop/polycap</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polycap</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polycap')]]></script>
  </tool>

  <tool name="sop_edgedivide" label="Edge Divide" icon="SOP_edgedivide">
    <helpURL>operator:Sop/edgedivide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgedivide</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgedivide', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_font" label="Font" icon="SOP_font">
    <helpURL>operator:Sop/font</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-1.95700001717, -0.373000025749, 0.0, 1.95700025558, 0.35900002718, 0.0)
soptoolutils.genericTool(kwargs, 'font')]]></script>
  </tool>

  <tool name="sop_cache" label="Cache" icon="SOP_cache">
    <helpURL>operator:Sop/cache</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/cache</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'cache')]]></script>
  </tool>

  <tool name="sop_texture" label="UV Texture" icon="SOP_texture">
    <helpURL>operator:Sop/texture</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/texture</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'texture')]]></script>
  </tool>

  <tool name="sop_object_merge" label="Object Merge" icon="SOP_object_merge">
    <helpURL>operator:Sop/object_merge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/object_merge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'object_merge')]]></script>
  </tool>

  <tool name="sop_reverse" label="Reverse" icon="SOP_reverse">
    <helpURL>operator:Sop/reverse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/reverse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'reverse', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_facet" label="Facet" icon="SOP_facet">
    <helpURL>operator:Sop/facet</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/facet</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'facet')]]></script>
  </tool>

  <tool name="sop_point" label="Point" icon="SOP_point">
    <helpURL>operator:Sop/point</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/point</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'point', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_sweep" label="Sweep" icon="SOP_sweep">
    <helpURL>operator:Sop/sweep</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/sweep</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'sweep')]]></script>
  </tool>

  <tool name="sop_attribtransfer" label="Attribute Transfer" icon="SOP_attribtransfer">
    <helpURL>operator:Sop/attribtransfer</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribtransfer</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribtransfer')]]></script>
  </tool>

  <tool name="sop_fuse" label="Fuse" icon="SOP_fuse">
    <helpURL>operator:Sop/fuse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/fuse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'fuse')]]></script>
  </tool>

  <tool name="sop_add" label="Add" icon="SOP_add">
    <helpURL>operator:Sop/add</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/add</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'add')]]></script>
  </tool>

  <tool name="sop_edgecollapse" label="Edge Collapse" icon="SOP_edgecollapse">
    <helpURL>operator:Sop/edgecollapse</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgecollapse</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgecollapse', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_bulge" label="Bulge" icon="SOP_bulge">
    <helpURL>operator:Sop/bulge</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/bulge</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'bulge')]]></script>
  </tool>

  <tool name="sop_creep" label="Creep" icon="SOP_creep">
    <helpURL>operator:Sop/creep</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/creep</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Utility</toolSubmenu>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'creep')]]></script>
  </tool>

  <tool name="sop_uvquickshade" label="UV Quick Shade" icon="SOP_uvquickshade">
    <helpURL>operator:Sop/uvquickshade</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvquickshade</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'uvquickshade', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_polyextrude" label="PolyExtrude" icon="SOP_polyextrude">
    <helpURL>operator:Sop/polyextrude</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyextrude</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyextrude', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_subdivide" label="Subdivide" icon="SOP_subdivide">
    <helpURL>operator:Sop/subdivide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/subdivide</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'subdivide')]]></script>
  </tool>

  <tool name="sop_polyreduce" label="PolyReduce" icon="SOP_polyreduce">
    <helpURL>operator:Sop/polyreduce</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/polyreduce</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'polyreduce')]]></script>
  </tool>

  <tool name="sop_twist" label="Twist" icon="SOP_twist">
    <helpURL>operator:Sop/twist</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/twist</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'twist')]]></script>
  </tool>

  <tool name="sop_vertex" label="Vertex" icon="SOP_vertex">
    <helpURL>operator:Sop/vertex</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/vertex</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'vertex')]]></script>
  </tool>

  <tool name="sop_revolve" label="Revolve" icon="SOP_revolve">
    <helpURL>operator:Sop/revolve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/revolve</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

soptoolutils.genericTool(kwargs, 'revolve', orient=OrientInfo('dir'))]]></script>
  </tool>

  <tool name="object_simplebiped" label="Simple Biped" icon="OBJ_simplebiped">
    <helpURL>operator:Object/simplebiped</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Character</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'simplebiped', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_mocapbiped1" label="Mocap Biped 1" icon="OBJ_autorig">
    <helpURL>operator:Object/mocapbiped1</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Character</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped1', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="object_mocapbiped2" label="Mocap Biped 2" icon="OBJ_autorig">
    <helpURL>operator:Object/mocapbiped2</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Character</toolSubmenu>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils

objecttoolutils.genericTool(kwargs, 'mocapbiped2', clicktoplace=False)
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    activepane.enterViewState()
]]></script>
  </tool>

  <tool name="sop_attribute" label="Attribute Rename" icon="SOP_attribute">
    <helpURL>operator:Sop/attribute</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribute</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribute')]]></script>
  </tool>

  <tool name="sop_visibility" label="Visibility" icon="SOP_visibility">
    <helpURL>operator:Sop/visibility</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/visibility</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'visibility')]]></script>
  </tool>

  <tool name="sop_trail" label="Trail" icon="SOP_trail">
    <helpURL>operator:Sop/trail</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/trail</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'trail')]]></script>
  </tool>

  <tool name="sop_dissolve" label="Dissolve" icon="SOP_dissolve">
    <helpURL>operator:Sop/dissolve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/dissolve</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'dissolve', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_attribpromote" label="Attribute Promote" icon="SOP_attribpromote">
    <helpURL>operator:Sop/attribpromote</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/attribpromote</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'attribpromote')]]></script>
  </tool>

  <tool name="sop_refine" label="Refine" icon="SOP_refine">
    <helpURL>operator:Sop/refine</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/refine</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'refine', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_edgeflip" label="Edge Flip" icon="SOP_edgeflip">
    <helpURL>operator:Sop/edgeflip</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/edgeflip</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <toolSubmenu>Edge</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'edgeflip', allow_obj_sel=False)]]></script>
  </tool>

  <tool name="sop_carve" label="Carve" icon="SOP_carve">
    <helpURL>operator:Sop/carve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/carve</contextOpType>
    </toolMenuContext>
    <toolSubmenu>NURBS</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'carve')]]></script>
  </tool>

  <tool name="sop_measure" label="Measure" icon="SOP_measure">
    <helpURL>operator:Sop/measure</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/measure</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'measure')]]></script>
  </tool>

  <tool name="dop_parentconstraint" label="Parent Constraint" icon="SHELF_parent_constraint">
    <helpURL>tool:parentconstraint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Constraints</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils

theSupportedNodeTypes = ("rbdpinconstraint",
                         "rbdconetwistconstraint",
                         "rbdsliderconstraint",
                         "rbdspringconstraint",
                         "rbdhingeconstraint",
                         "rbdangularconstraint",
                         "rbdangularspringconstraint")

sceneviewer = toolutils.activePane(kwargs)
prompt = "Select constraint to change parent. Press Enter to accept selection."
seldata = sceneviewer.selectDynamics(prompt = prompt,
                                     allow_objects = False,
                                     allow_modifiers = True,
                                     allow_multisel = False)
if len(seldata) == 1:
    creator = doptoolutils.getDopDataCreator(seldata[0])
    if creator.type().name() in theSupportedNodeTypes:
        prompt = "Select new goal object. Press Enter to accept selection."
        selobjects = sceneviewer.selectDynamics(prompt = prompt,
                                                allow_objects = True,
                                                allow_modifiers = False,
                                                allow_multisel = False)
        if len(selobjects) == 1:
            selobjectname = selobjects[0].name()
        else:
            selobjectname = ""
        creator.parm("goalgroup").set(selobjectname)
        creator.parm("mirror").set(len(selobjectname) > 0)
        creator.setCurrent(True, True)
        sceneviewer.enterCurrentNodeState()
    else:
        raise hou.OperationFailed("An unsupported constraint type was selected.")
else:
    raise hou.OperationFailed("No constraint was selected.")]]></script>
  </tool>

  <tool name="object_freeze" label="Freeze" icon="SHELF_freezetransforms">
    <helpURL>tool:freeze</helpURL>
    <script scriptType="python"><![CDATA[import objecttoolutils
import toolutils


# Determine context
active_pane = toolutils.activePane(kwargs)
scene_viewer = toolutils.sceneViewer()
pwd = scene_viewer.pwd()

# Prompt selection
selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))
if len(selected) == 0:
    raise hou.Error("Nothing was selected")
objecttoolutils.freeze(selected)]]></script>
  </tool>

  <tool name="sop_ripple" label="Ripple" icon="SOP_ripple">
    <helpURL>operator:Sop/ripple</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/ripple</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

ripple = soptoolutils.genericTool(kwargs, 'ripple', orient=OrientInfo('up'))
ripple.parm('usecenter').set(True)
]]></script>
  </tool>

  <tool name="geometry_waves" label="Waves" icon="SHELF_oceanwaves">
    <helpURL>tool:waves</helpURL>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

evalnode = soptoolutils.genericTool(kwargs, 'oceanevaluate')
spectrumnode = evalnode.parent().createNode('oceanspectrum')
spectrumnode.parm('windspeed').set(10)
evalnode.setNextInput(spectrumnode)
spectrumnode.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="sop_waveform" label="Waveform" icon="SOP_waveform">
    <helpURL>operator:Sop/waveform</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericTool(kwargs, 'waveform')]]></script>
  </tool>

  <tool name="sky_rig" label="Sky Rig" icon="SOP_sky">
    <helpURL>operator:Sop/sky</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import skytoolutils
skytoolutils.skySource(kwargs)
]]></script>
  </tool>

  <tool name="cloud_create" label="Cloud Rig" icon="SHELF_cloudrig">
    <helpURL>tool:cloudrig</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudSource(kwargs)
]]></script>
  </tool>

  <tool name="cloud_light" label="Cloud Light" icon="SOP_cloudlight">
    <helpURL>operator:Sop/cloudlight</helpURL>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import cloudtoolutils
cloudtoolutils.cloudLight(kwargs)
]]></script>
  </tool>

  <tool name="sop_break" label="Break" icon="SOP_break">
    <helpURL>operator:Sop/break</helpURL>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

soptoolutils.scriptSopFilterTool(kwargs, 'break', center_on_selection=True, orient=OrientInfo('r'))]]></script>
  </tool>

  <tool name="geometry_copy" label="Copy to Points" icon="SOP_copy">
    <helpURL>tool:copytopoints</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
soptoolutils.genericTool(kwargs, 'copy')]]></script>
  </tool>

  <tool name="geometry_duplicate" label="Duplicate" icon="SOP_duplicate">
    <helpURL>tool:duplicate</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objcopy')
else:
    soptoolutils.genericTool(kwargs, 'duplicate')]]></script>
  </tool>

  <tool name="geometry_sphere" label="Sphere" icon="SOP_sphere">
    <helpURL>tool:sphere</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
rad = 0.5
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
sphere = soptoolutils.genericTool(kwargs, 'sphere')
sphere.parm("type").set("polymesh")
sphere.parm("radx").set(rad)
sphere.parm("rady").set(rad)
sphere.parm("radz").set(rad)
]]></script>
  </tool>

  <tool name="geometry_tube" label="Tube" icon="SOP_tube">
    <helpURL>tool:tube</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
rad = 0.5
height = 1.0
kwargs['bbox'] = hou.BoundingBox(-rad, -height/2., -rad, rad, height/2., rad)
tube = soptoolutils.genericTool(kwargs, 'tube')
tube.parm("type").set("poly")
tube.parm("radscale").set(rad)
tube.parm("height").set(height)
]]></script>
  </tool>

  <tool name="geometry_torus" label="Torus" icon="SOP_torus">
    <helpURL>tool:torus</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
orad = 0.5
irad = 0.25
kwargs['bbox'] = hou.BoundingBox(-orad - irad, -irad, -orad - irad, orad + irad, irad, orad + irad)
torus = soptoolutils.genericTool(kwargs, 'torus')
torus.parm("type").set("poly")
torus.parm("radx").set(orad)
torus.parm("rady").set(irad)
]]></script>
  </tool>

  <tool name="geometry_grid" label="Grid" icon="SOP_grid">
    <helpURL>tool:grid</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

size = 4.0
kwargs['bbox'] = hou.BoundingBox(-size/2.0, 0, -size/2.0, size/2.0, 0, size/2.0)
grid = soptoolutils.genericTool(kwargs, 'grid')
grid.parm("sizex").set(size)
grid.parm("sizey").set(size)
]]></script>
  </tool>

  <tool name="geometry_platonic" label="Platonic Solids" icon="SOP_platonic">
    <helpURL>tool:platonic</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

rad = 0.5
kwargs['bbox'] = hou.BoundingBox(-rad, -rad, -rad, rad, rad, rad)
platonic = soptoolutils.genericTool(kwargs, 'platonic')
platonic.parm("radius").set(rad)
]]></script>
  </tool>

  <tool name="geometry_circle" label="Circle" icon="SOP_circle">
    <helpURL>tool:circle</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-1.0, -1., -.0, 1.0, 1., .0)
sphere = soptoolutils.genericTool(kwargs, 'circle')
sphere.parm("type").set("poly")
]]></script>
  </tool>

  <tool name="geometry_box" label="Box" icon="SOP_box">
    <helpURL>tool:box</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Create</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
sphere = soptoolutils.genericTool(kwargs, 'box')
sphere.parm("type").set("polymesh")
sphere.parm("divrate1").set(2)
sphere.parm("divrate2").set(2)
sphere.parm("divrate3").set(2)
]]></script>
  </tool>

  <tool name="geometry_bend" label="Bend" icon="SHELF_twist_bend">
    <helpURL>tool:bend</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

node = soptoolutils.genericTool(kwargs, 'twist', 'bend1', orient=OrientInfo('saxis'))
node.parm("op").set("bend")]]></script>
  </tool>

  <tool name="geometry_mirror" label="Mirror" icon="SOP_mirror">
    <helpURL>tool:mirror</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

scene_viewer = toolutils.sceneViewer();
current_path = scene_viewer.pwd();
if current_path.childTypeCategory() == hou.objNodeTypeCategory():
    toolutils.genericStateTool(kwargs, 'objmirror')
else:
    soptoolutils.genericTool(kwargs, 'mirror')]]></script>
  </tool>

  <tool name="geometry_boolean" label="Boolean" icon="SOP_cookie">
    <helpURL>tool:boolean</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

def generic():
    Node = soptoolutils.genericTool(kwargs,'cookie','boolean1')
    Node.parm("boolop").set("intersect")
    return

# Determine context
active_pane = toolutils.activePane(kwargs)
scene_viewer = toolutils.sceneViewer()
pwd = scene_viewer.pwd()

if not isinstance(active_pane, hou.SceneViewer):
    generic()
elif pwd.childTypeCategory() != hou.objNodeTypeCategory():
    generic()
else:
    # Prompt selection
    selected = list(scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",)))
    if len(selected) <= 1:
        generic()
    else:
        current_objects = [obj for obj in selected if obj.isCurrent()]
        if len(current_objects) == 0:
            container = selected[-1]
        else:
            container = current_objects[-1]

        selected.remove(container)
        container.combine(selected)
        merge = container.displayNode()

        # Pass inputs to boolean  
        inputs = merge.inputs()
        first = inputs[0]
        for i in range(1,len(inputs)):
            cookie = container.createNode('cookie', 'boolean1')
            cookie.setFirstInput(first)
            cookie.setNextInput(inputs[i])
            cookie.moveToGoodPosition()
            cookie.parm("boolop").set("intersect")
            first = cookie

        if len(inputs) > 1:
            cookie.setDisplayFlag(True)
            if merge.isRenderFlagSet():
                cookie.setRenderFlag(True)

        merge.destroy()
        toolutils.homeToSelectionNetworkEditorsFor(container)]]></script>
  </tool>

  <tool name="geometry_fogvolume" label="Volume" icon="SOP_volume">
    <helpURL>operator:Sop/isooffset</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils

node = soptoolutils.genericTool(kwargs, 'isooffset', 'converttofog1')
node.parm("output").set('fogvolume')
node.parm("samplediv").set(30)
]]></script>
  </tool>

  <tool name="geometry_voronoifracture" label="Shatter" icon="SOP_shatter">
    <helpURL>tool:shatter</helpURL>
    <script scriptType="python"><![CDATA[
import soptoolutils

# Create our voronoi fracture

fracture = soptoolutils.genericTool(kwargs, 'voronoifracture')

fognode = fracture.parent().createNode('isooffset', 'converttofog1')
fognode.parm("output").set('fogvolume')
fognode.parm("samplediv").set(30)

fognode.setNextInput(fracture.inputs()[0])

fognode.moveToGoodPosition()

scatternode = fracture.parent().createNode('scatter', 'chunkcenters')
scatternode.parm("forcetotal").set(True)
scatternode.parm("npts").set(10)
scatternode.parm("relaxpoints").set(False)
scatternode.setNextInput(fognode)
scatternode.moveToGoodPosition()

fracture.setNextInput(scatternode)
fracture.moveToGoodPosition()

]]></script>
  </tool>

  <tool name="geometry_squashstretch" label="Squash and Stretch" icon="SHELF_twist_squashstretch">
    <helpURL>tool:squashstretch</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils

node = soptoolutils.genericTool(kwargs, 'twist', 'squashstretch1')
node.parm("op").set("squash")]]></script>
  </tool>

  <tool name="geometry_lineartaper" label="Linear Taper" icon="SHELF_twist_linear_taper">
    <helpURL>tool:lineartaper</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

node = soptoolutils.genericTool(kwargs, 'twist', 'lineartaper1', orient=OrientInfo('saxis'))
node.parm("op").set("ltaper")]]></script>
  </tool>

  <tool name="geometry_taper" label="Taper" icon="SHELF_twist_taper">
    <helpURL>tool:taper</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils
from soptoolutils import OrientInfo

node = soptoolutils.genericTool(kwargs, 'twist', 'taper1', orient=OrientInfo('saxis'))
node.parm("op").set("taper")]]></script>
  </tool>

  <tool name="geometry_loft" label="Loft" icon="SOP_loft">
    <helpURL>tool:loft</helpURL>
    <script scriptType="python"><![CDATA[import soptoolutils

u_selector_only = [0]
node = soptoolutils.genericSopNodeFilterTool(kwargs, 'skin', 'loft1', False, False, True, u_selector_only)]]></script>
  </tool>

  <tool name="object_parentblend" label="Parent Blend" icon="OBJ_blend">
    <helpURL>operator:Object/blend</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

toolutils.genericStateTool(kwargs, 'blend')]]></script>
  </tool>

  <tool name="sop_metaball" label="Metaball" icon="SOP_metaball">
    <helpURL>operator:Sop/metaball</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/metaball</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5)
soptoolutils.genericTool(kwargs, 'metaball', merge_context=True)]]></script>
  </tool>

  <tool name="sop_knife" label="Knife" icon="SHELF_knife">
    <helpURL>operator:Sop/knife</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/knife</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

knife_sop = soptoolutils.genericTool(kwargs, 'knife', 'knife1', custom = False,
                                     orient = OrientInfo('dir'))
knife_sop.parm("knifeop").set("both")
knife_sop.setCreatorState('knife')
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer):
    sceneviewer = toolutils.sceneViewer()
    sceneviewer.setCurrentState("knife")
]]></script>
  </tool>

  <tool name="sop_clip" label="Clip" icon="SOP_clip">
    <helpURL>operator:Sop/clip</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Polygon</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils
from soptoolutils import OrientInfo

clip_sop = soptoolutils.genericTool(kwargs, 'clip', orient = OrientInfo('dir'))
activepane = toolutils.activePane(kwargs)
if isinstance(activepane, hou.SceneViewer) and \
	clip_sop is not None and len(clip_sop.inputs()) > 0:
    input = clip_sop.inputs()[0]
    input_center = input.geometry().boundingBox().center()
    clip_sop.parmTuple('origin').set(input_center)]]></script>
  </tool>

  <tool name="sop_connectivity" label="Connectivity" icon="SOP_connectivity">
    <helpURL>operator:Sop/connectivity</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Attribute</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

activepane = toolutils.activePane(kwargs)
old_group_list_visible = True
old_group_list_mask = "*"
if isinstance(activepane, hou.SceneViewer):
    old_group_list_visible = activepane.isGroupListVisible()
    old_group_list_mask = activepane.groupListMask()
    activepane.setGroupListMask("+cut")
    activepane.setGroupListVisible(True)
newsop = soptoolutils.genericTool(kwargs, "connectivity")
if isinstance(activepane, hou.SceneViewer):
    if newsop is not None:
	newsop.parm('connecttype').set('prim')
    activepane.setGroupListVisible(old_group_list_visible)
    activepane.setGroupListMask(old_group_list_mask)
]]></script>
  </tool>

  <tool name="geometry_extract" label="Extract" icon="SHELF_extract_object">
    <helpURL>tool:extract</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("This tool cannot run in the current pane")

scene_viewer = toolutils.sceneViewer()
nodetypename = "delete"

# Obtain a geometry selection
geo_types = (hou.geometryType.Primitives, )
selection = scene_viewer.selectGeometry(
                "Select the primitives to extract and press Enter to complete",
                geometry_types = geo_types,
                allow_obj_sel = True)
# The following will raise an exception if nothing was selected.
if len(selection.nodes()) == 0:
    raise hou.Error("Nothing was selected.")

# Create a new SOP container with the merged geometry 
container = soptoolutils.createSopNodeContainer(scene_viewer, "extract_object1")
merge_sop = selection.mergedNode(container, nodetypename, True, True)
# Turn back on the display flag for merged nodes
for sop in selection.nodes():
    sop.parent().setDisplayFlag(True)

# Change our viewer to the new object
scene_viewer.setPwd(merge_sop.parent())
merge_sop.setDisplayFlag(True)
merge_sop.setRenderFlag(True)
merge_sop.setHighlightFlag(True)
merge_sop.setCurrent(True, True)
merge_sop.moveToGoodPosition()
toolutils.homeToSelectionNetworkEditorsFor(merge_sop)
scene_viewer.enterCurrentNodeState()]]></script>
  </tool>

  <tool name="object_centerpivot" label="Center Pivot" icon="SHELF_center_pivot">
    <helpURL>tool:centerpivot</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = None
activepane = toolutils.activePane(kwargs)
parent = activepane.pwd()
if activepane.type() != hou.paneTabType.SceneViewer:
    # Use the last selected object
    if parent.childTypeCategory() != hou.objNodeTypeCategory():
        raise hou.Error("This tool cannot be executed in this context")
    selected = [child for child in parent.children() if child.isSelected()]
else:
    scene_viewer = toolutils.sceneViewer()
    selected = scene_viewer.selectObjects(
                prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
                allow_multisel = True,
                allowed_types = ("geo",))

if len(selected) == 0:
    raise hou.Error("Nothing was selected")

for center_obj in selected:
    display = center_obj.displayNode()
    if display is None:
        pivot = hou.Vector3(0, 0, 0)        # Use 0,0,0 by convention
    else:
        geo = display.geometry()
        pivot = geo.boundingBox().center()
    center_obj.parmTuple("p").set(pivot)

if scene_viewer is not None:
    scene_viewer.setCurrentState("objxform")]]></script>
  </tool>

  <tool name="sop_group" label="Group" icon="SOP_group">
    <helpURL>operator:Sop/group</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Manipulate</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
soptoolutils.genericTool(kwargs, 'group')]]></script>
  </tool>

  <tool name="object_combine" label="Combine" icon="SHELF_combine_objects">
    <helpURL>tool:combine</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

scene_viewer = toolutils.sceneViewer()

# Ask for the objects to combine
selected_objects = list(scene_viewer.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = True,
    allowed_types = ("geo",)))
# The following will raise an exception if nothing was selected.
if len(selected_objects) == 0:
    raise hou.Error("Nothing was selected.")

# Combine into the last picked item
current_objects = [obj for obj in selected_objects if obj.isCurrent()]
if len(current_objects) == 0:
    container = selected_objects[-1]
else:
    container = current_objects[-1]

selected_objects.remove(container)
container.combine(selected_objects)
toolutils.homeToSelectionNetworkEditorsFor(container)
]]></script>
  </tool>

  <tool name="sop_curve" label="Curve" icon="SOP_curve">
    <helpURL>operator:Sop/curve</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Primitive</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

activepane = toolutils.activePane(kwargs)
if activepane.type() == hou.paneTabType.SceneViewer:
    # Get the current context.
    sceneviewer = toolutils.sceneViewer()
    # Create a SOP container.
    container = soptoolutils.createSopNodeContainer(sceneviewer, "curve_object1")
    # Create the curve.
    newnode = soptoolutils.createSopNodeGenerator(container, "curve", None)
    # Turn on the highlight flag so we see the SOPs selected output.
    newnode.setHighlightFlag(True)
    if sceneviewer.isCreateInContext():
        newnode.setCurrent(True, True)
        sceneviewer.enterCurrentNodeState()
        toolutils.homeToSelectionNetworkEditorsFor(newnode)
    else:
        container.setCurrent(True, True)
        toolutils.homeToSelectionNetworkEditorsFor(container)
        activepane.setPwd(container.parent())
        activepane.setCurrentState("objcurve")
elif activepane.type() == hou.paneTabType.NetworkEditor:
    soptoolutils.genericTool(kwargs, "curve")
else:
    raise hou.Error("Can't run the tool in the selected pane.")]]></script>
  </tool>

  <tool name="geometry_slidemodifierpaint" label="Paint Sliding Modifier" icon="SOP_slidemodifierpaint">
    <helpURL>operator:Sop/slidemodifierpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericCaptureTool(kwargs, 'slidemodifierpaint')]]></script>
  </tool>

  <tool name="object_paintcapturelayer" label="Paint Capture Layer" icon="OBJ_STATE_paintcapturelayer">
    <helpURL>operator:Sop/capturelayerpaint</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.genericCaptureTool(kwargs, 'capturelayerpaint')]]></script>
  </tool>

  <tool name="object_addmuscletosolution" label="Add Muscle to Solution" icon="SOP_capture">
    <helpURL>tool:addmuscletosolution</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils

activepane = toolutils.activePane(kwargs)

if not isinstance(activepane, hou.SceneViewer):
    raise hou.Error('No Scene Viewer detected.')

selection = activepane.selectObjects(
        prompt = 'Select skin to modify the solution of and press Enter.',
        allowed_types = ('geo', ),
        allow_multisel = False)

if not selection:
    activepane.enterViewState()
    raise hou.Error('No skin selected.')

skinnetwork = selection[0]

muscles = activepane.selectObjects(
            prompt = 'Select muscle objects to add to the solution',
            allowed_types = ('muscle', ))

activepane.enterViewState()

if not muscles:
    raise hou.Error('No muscles selected.')

# Attempt to find a metacapture node to add the selected muscles
# to.  If we can't find one, abort.
capturenodes = [child for child in skinnetwork.children()
                if child.type() == hou.nodeType(hou.sopNodeTypeCategory(),
                                                'capturemeta')]

if not capturenodes:
    raise hou.Error('Could not find metacapture node in skin network')

# If more than one capturemete node is found, prompt the user to
# select the one they wish to add to.
if len(capturenodes) > 1:
    # Create a string list of capture node names.
    capturelist = [node.name() for node in capturenodes]

    choice = hou.ui.selectFromList(capturelist,
                                   exclusive = True,
                                   message = 'Select target capture node.',
                                   title = 'Select capture node.')
    capturenode = capturenodes[choice[0]]
else:
    capturenode = capturenodes[0]

# Get the string of relative paths from the capture node to the 
# muscles in the solution.
captobjects = capturenode.parm('captobjects').eval()

# For each muscle, get the relative path to the muscle sop inside 
# and append it to the solution string.

captobjects += ' ' + ' '.join(
                        [capturenode.relativePathTo(muscle.node('muscle'))
                         for muscle in muscles])
    
# Set the new list of muscles.
capturenode.parm('captobjects').set(captobjects)

# Attempt to find a capture mirror node and set any mirroring 
# of the muscles.
mirrornodes = [child for child in skinnetwork.children()
                if child.type() == hou.nodeType(hou.sopNodeTypeCategory(),
                                                'capturemirror')]

if mirrornodes:
    # If more than one capturemirror node is found, prompt the user to
    # select the one they wish to use.
    if len(mirrornodes) > 1:
        mirrorlist = [node.name() for node in mirrornodes]

        choice = hou.ui.selectFromList(mirrorlist,
                                    exclusive = True,
                                    message = 'Select target mirror node.',
                                    title = 'Select mirror node.')

        mirrornode = mirrornodes[choice[0]]
    else:
        mirrornode = mirrornodes[0]

    # Create 2 sets of muscle lists for use in generating mirroring.
    musclesFrom = set(muscles)
    musclesTo = musclesFrom.copy()

    # Loop through the muscles looking for any that are 'left'.
    for muscle in muscles:
        # If we find one, try and find a corresponding 'right'
        # muscle.
        name = muscle.name()
        if name.find('left') is not -1:
            mirrormuscle =  muscle.node('../' 
                                + name.replace('left', 'right'))
            # If we find a corresponding right muscle, remove
            # the right muscle from the 'From' list and the left muscle
            # from the 'To' list if the right muscle is in the list of
            # selected muscles.
            if mirrormuscle and mirrormuscle in muscles:
                musclesFrom.remove(mirrormuscle)
                musclesTo.remove(muscle)
    
    # Create the mirror strings with the appropriate info.
    # "name/muscle musclename" eg. "muscle_left/muscle muscle_left"
    fromSting = ' '.join(['"' + name + '/muscle ' 
                        + muscle.parm('musclename').eval() + '"' 
                        for muscle in musclesFrom])

    toString = ' '.join(['"' + name + '/muscle ' 
                        + muscle.parm('musclename').eval() + '"' 
                        for muscle in musclesTo])

    # Append the mirror strings to the mirror node parameters.
    mirrornode.parm('from').set(mirrornode.parm('from').eval() + ' ' +
                                 fromSting)

    mirrornode.parm('to').set(mirrornode.parm('to').eval() + ' ' +
                               toString)]]></script>
  </tool>

  <tool name="object_pointmuscles" label="Point Muscles" icon="SOP_muscle">
    <helpURL>tool:pointmuscles</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Rigging</toolSubmenu>
    <script scriptType="python"><![CDATA[import charactertoolutils

type = charactertoolutils.multiTypeSelectionTool(kwargs,
                                                 ('twopointmuscle',
                                                  'threepointmuscle',
                                                  'fourpointmuscle'),
                                                 default=0)

if type:
    charactertoolutils.genericPointMuscleTool(kwargs, type)]]></script>
  </tool>

  <tool name="generic_delete" label="Delete" icon="SOP_delete">
    <helpURL>tool:delete</helpURL>
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils
import doptoolutils
import poptoolutils


# find out curr context
active_pane = toolutils.activePane(kwargs)
if active_pane is not None and \
    active_pane.type() == hou.paneTabType.ContextViewer:
    active_pane = active_pane.sceneViewer()

if active_pane is None or active_pane.type() != hou.paneTabType.SceneViewer:
    raise hou.Error("The tool was not invoked in the scene viewer.")
    
# we determine what selection type we should consider (ie, OBJ, SOP,
#  DOP, POP) based on the viewer network path and the child type
scene_viewer = active_pane
child_type   = scene_viewer.pwd().childTypeCategory()

if child_type == hou.objNodeTypeCategory():
    # object context: delete the object nodes
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
    selected_objects = list(scene_viewer.selectObjects(prompt))
    for object in selected_objects:
        object.destroy()

elif child_type == hou.sopNodeTypeCategory():
    # geometry context: delete the component (points, edges, primitives)
    prompt = toolutils.selectionPrompt(hou.sopNodeTypeCategory())
    selection = scene_viewer.selectGeometry(prompt)
    type = selection.geometryType()
    if type == hou.geometryType.Primitives \
	     or type == hou.geometryType.Points \
	     or not selection.primitiveTypes():
        node = soptoolutils.genericTool(kwargs, 'blast')
	node.parm('removegrp').set(True)
    else:
        soptoolutils.genericTool(kwargs, 'dissolve')    
elif child_type == hou.dopNodeTypeCategory():
    # dynamics context: remove object or modifier from simulation
    # obtain the selection and separate objects from modifiers
    prompt = toolutils.selectionPrompt(hou.dopNodeTypeCategory())
    selected_dops = list(scene_viewer.selectDynamics(prompt, 0, True, True))
    dop_objects = []
    dop_modifiers = []
    for dop in selected_dops:
        if isinstance(dop, hou.DopObject):
            dop_objects.append( dop )
        elif isinstance(dop, hou.DopData):
            dop_modifiers.append( dop )
    # call functions that remove the dop data and modifiers from simulation
    if len(dop_objects) > 0:
        doptoolutils.dopObjectsRemoveFromSimulation(dop_objects)
    if len(dop_modifiers) > 0:
        doptoolutils.dopModifiersRemoveFromSimulation(dop_modifiers)
    
elif child_type == hou.popNodeTypeCategory():
    # particle context: remove pop nodes or modifires
    prompt = toolutils.selectionPrompt(hou.popNodeTypeCategory())
    selected_pops = list(scene_viewer.selectParticles(prompt))
    for pop in selected_pops:
        pop.destroy()

]]></script>
  </tool>

  <tool name="generic_hide" label="Hide" icon="SHELF_hide">
    <helpURL>tool:hide</helpURL>
    <script scriptType="python"><![CDATA[import toolutils

active_pane = toolutils.activePane(kwargs)
prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory())
selected_objects = list(active_pane.selectObjects(prompt))
for object in selected_objects:
    object.setDisplayFlag( False )
toolutils.genericStateTool(kwargs, 'objview')]]></script>
  </tool>

  <tool name="generic_cleartexcache" label="Clear Texture Cache" icon="SHELF_clear_texture_cache">
    <helpURL>tool:cleartexcache</helpURL>
    <script scriptType="hscript"><![CDATA[texcache -c]]></script>
  </tool>

  <tool name="sop_uvproject" label="UV Project" icon="SOP_uvproject">
    <helpURL>operator:Sop/uvproject</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/uvproject</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Material</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

sop = soptoolutils.genericTool(kwargs, 'uvproject', allow_obj_sel = False)
# compute the geometry bounding box and use it for the projection plane
sop.parm('initbbox').pressButton()]]></script>
  </tool>

  <tool name="sop_file" label="File" icon="SOP_file">
    <helpURL>operator:Sop/file</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Sop/file</contextOpType>
    </toolMenuContext>
    <toolSubmenu>Import</toolSubmenu>
    <toolSubmenu>Export</toolSubmenu>
    <script scriptType="python"><![CDATA[import soptoolutils

soptoolutils.chooseAndOpenGeoFile(kwargs, True)]]></script>
  </tool>

  <tool name="object_drawhairguides" label="Draw Hair" icon="SOP_drawhair">
    <helpURL>tool:drawhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startDrawing(kwargs)]]></script>
  </tool>

  <tool name="object_plantguides" label="Plant Guides" icon="FUR_plant_guides">
    <helpURL>tool:plantguides</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.createFurAndStartGrooming(kwargs, tool="plantguides")]]></script>
  </tool>

  <tool name="object_reguide" label="Reguide" icon="FUR_reguide">
    <helpURL>tool:reguide</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.addUtil(kwargs, tool="reguide")]]></script>
  </tool>

  <tool name="object_groomhairinscreen" label="Screen Brush" icon="FUR_screen_brush">
    <helpURL>tool:screenbrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="groomscreen")]]></script>
  </tool>

  <tool name="object_groomhairalongsurface" label="Surface Brush" icon="FUR_surface_brush">
    <helpURL>tool:surfacebrush</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="groomsurface")]]></script>
  </tool>

  <tool name="object_groomliftbrush" label="Lift Hair" icon="FUR_lift_hair">
    <helpURL>tool:lifthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="lift")]]></script>
  </tool>

  <tool name="object_groomclumpbrush" label="Clump Hair" icon="FUR_clump_hair">
    <helpURL>tool:clumphair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="clump")]]></script>
  </tool>

  <tool name="object_groompartbrush" label="Part Hair" icon="FUR_part_hair">
    <helpURL>tool:parthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="part")]]></script>
  </tool>

  <tool name="object_groomadjustlength" label="Length Adjust" icon="FUR_adjust_length">
    <helpURL>tool:lengthadjust</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="adjustlength")]]></script>
  </tool>

  <tool name="object_groomsmooth" label="Smooth Hair" icon="FUR_smooth">
    <helpURL>tool:smoothhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="smooth")]]></script>
  </tool>

  <tool name="object_groomcuthair" label="Cut Hair" icon="FUR_cut_hair">
    <helpURL>tool:cuthair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="cut")]]></script>
  </tool>

  <tool name="object_groomextendhair" label="Extend Hair" icon="FUR_length">
    <helpURL>tool:extendhair</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Grooming</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils

furtoolutils.startGrooming(kwargs, tool="extend")]]></script>
  </tool>

  <tool name="object_addfur" label="Add Fur" icon="FUR_add_fur">
    <helpURL>tool:addfur</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import objecttoolutils

active_pane = toolutils.activePane(kwargs)
if isinstance(active_pane, hou.SceneViewer):
    container = objecttoolutils.getObjNodeContainer(active_pane.pwd())
    selection = active_pane.selectGeometry(prompt = 'Select the polygons to which to add fur and press Enter to complete.', geometry_types = (hou.geometryType.Primitives, ), primitive_types = (hou.primType.Polygon, ))
    for node, sel in zip(selection.nodes(), selection.selectionStrings()):
        scale = node.geometry().boundingBox().sizevec().length()
        object = node.creator()
        fur = container.createNode('fur', object.name() + '_fur')
        p = fur.parm('skin')
        if p is not None:
            p.set(object.path())
        p = fur.parm('group')
        if p is not None:
            p.set(sel)
        if scale > 0:
            inv_scale2 = 1.0 / (scale * scale)
            for n, v in ('length', 0.08 * scale), ('displaydensity', 7000 * inv_scale2), ('renderdensity', 215000 * inv_scale2), ('guidedensity', 1400 * inv_scale2), ('thicknessmax', 0.0014 * scale), ('clumpdensity', 2800 * inv_scale2), ('partingradius', 0.006 * scale):
                p = fur.parm(n)
                if p is not None:
                    p.set(v)
        fur.moveToGoodPosition()
        fur.setCurrent(True, True)
    active_pane.enterCurrentNodeState()
else:
    objecttoolutils.genericTool(kwargs, "fur")]]></script>
  </tool>

  <tool name="object_addparting" label="Add Parting" icon="FUR_addparting">
    <helpURL>tool:addparting</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils

active_pane = toolutils.activePane(kwargs)
if isinstance(active_pane, hou.SceneViewer):
    prompt = 'Select fur object to add a parting line and press Enter to complete.'
    for object in active_pane.selectObjects(prompt):
        fur = toolutils.findAncestorOfBaseType(object, hou.objNodeTypeCategory(), 'fur')
        if fur is None:
            continue
        object = fur.node('parting_lines')
        if object is None:
            continue

        # create curve node and wire into parting network
        displaynode = object.displayNode()
        curve = object.createNode('curve', 'parting_line')
        if displaynode is not None:
            oldcurve = toolutils.findInputNodeOfType(displaynode, 'curve', True)
            if oldcurve is not None:
                for node in oldcurve.inputs():
                    curve.setNextInput(node)

            if displaynode.type().name() != 'merge':
                merge = object.createNode('merge')
                merge.setFirstInput(displaynode)
                merge.moveToGoodPosition()
                displaynode = merge

            curve.moveToGoodPosition()
            displaynode.setNextInput(curve)
            displaynode.setDisplayFlag(True)

        curve.setCurrent(True, True)
        # turn on snapping
        active_pane.setSnappingMode(hou.snappingMode.Prim)
        active_pane.setSnapToTemplates(True)
        active_pane.setSnapToOtherObjects(False)
        active_pane.enterCurrentNodeState()
        break
]]></script>
  </tool>

  <tool name="object_paintfurdensity" label="Paint Density" icon="FUR_paint_density">
    <helpURL>tool:paintfurdensity</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'furdensity', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintfurthickness" label="Paint Thickness" icon="FUR_thickness">
    <helpURL>tool:paintfurthickness</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'width', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintbasecolor" label="Paint Base Color" icon="FUR_paint_base_color">
    <helpURL>tool:paintbasecolor</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'baseColor', {'attribdef': hou.Vector3(1.0, 1.0, 1.0), 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintfurfrizz" label="Paint Frizz" icon="FUR_paint_frizz">
    <helpURL>tool:paintfurfrizz</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'furfrizz', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintfurfrizzfrequency" label="Paint Frizz Frequency" icon="FUR_paint_frizz_frequency">
    <helpURL>tool:paintfurfrizzfrequency</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'furfrizzfreq', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintfurfrizzroughness" label="Paint Frizz Roughness" icon="FUR_paint_frizz_roughness">
    <helpURL>tool:paintfurfrizzroughness</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'furfrizzrough', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintfurclumping" label="Paint Clumping" icon="FUR_paint_clumping">
    <helpURL>tool:paintfurclumping</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'furclumping', {'attribdef': 1, 'fgcolor': 1, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintwhitehairdensity" label="Paint White Hair Density" icon="FUR_paint_white_density">
    <helpURL>tool:paintwhitehairdensity</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'whitehairdensity', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintguardhairdensity" label="Paint Guard Hair Density" icon="FUR_paint_guard_density">
    <helpURL>tool:paintguardhairdensity</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'guardhairdensity', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_paintguardhairlength" label="Paint Guard Hair Length" icon="FUR_paint_guard_length">
    <helpURL>tool:paintguardhairlength</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import furtoolutils
furtoolutils.chooseAndPaintFurObject(kwargs, 'furguardhairlength', {'attribdef': 1, 'fgcolor': 2, 'opacity': 0.3, 'radius': 1})
]]></script>
  </tool>

  <tool name="object_furdynamics" label="Add Dynamics" icon="FUR_add_dynamics">
    <helpURL>tool:furdynamics</helpURL>
    <toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>Hair</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import doptoolutils
import dopsbdtoolutils
import dopwiretoolutils

dopwiretoolutils.addDynamicsToFur(kwargs)
]]></script>
  </tool>

  <tool name="object_lagobject" label="Lag" icon="CHOP_lag">
    <helpURL>tool:lagobject</helpURL>
    <script scriptType="python"><![CDATA[]]></script>
  </tool>

  <tool name="csBubbleUpTakeParms" label="csBubbleUpTakeParms" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[
panes = [x for x in hou.ui.paneTabs() if x.type()==hou.paneTabType.NetworkEditor and x.isCurrentTab()]

if hou.takes.currentTake() != hou.takes.rootTake():
    parms = [[x, x.eval()] for x in hou.takes.currentTake().parmTuples()]
    
    curname = hou.takes.currentTake().name()
    
    hou.takes.setCurrentTake( hou.takes.rootTake() )
    
    for parm in parms:
        parm[0].set( parm[1] )
        
    for pane in panes:
        pane.flashMessage('$HFS/houdini/help/icons/DIALOG/important.svg', 'Set parameters from: %s' % curname, 2)
        
else:
    for pane in panes:
        pane.flashMessage('$HFS/houdini/help/icons/DIALOG/important.svg','Main take active. Doing nothing.', 2)
    
        
        
]]></script>
  </tool>

  <tool name="tool_whMantra" label="whMantra" icon="ROP_soho">
    <script scriptType="python"><![CDATA[n = hou.node('/out').createNode('whMantra')

n.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="csDumpParms" label="csDumpParms" icon="SOP_font">
    <script scriptType="python"><![CDATA[import json

nodes = hou.selectedNodes()


for node in nodes:
    print node.name()
    filename = "/usr/home/cschitter/%s.txt"%node.name()
    p = [[x.name(),x.eval()] for x in node.parms()]
    p = sorted(p, key=lambda parm: parm[0])       
    with open(filename, "w") as f:
        for i in p:            
            f.write('%s: %s\n'%(i[0], i[1]))
    print '%s -> %s'%(node.name(),filename)
    
    ]]></script>
  </tool>

  <tool name="csSetVisualizeNode" label="csSetVisualizeNode" icon="SOP_visualize">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()


for node in nodes:
    print node.name(), node.type().name(),  node.color()
    print kwargs
    col = hou.Color()
    col.setRGB((0.4, 0.8, 1.0))
    node.setColor( col )    ]]></script>
  </tool>

  <tool name="srnd_docbuild" label="Doc Build" icon="MISC_tutorials">
    <helpText><![CDATA[= Doc Build =

#type: shelf
#internal: docbuild
#icon: MISC/tutorials

""" Quick way to generate help cards for hdas. """

== Overview ==

Select The node you want to generate a help-card for,
then click this tool to launch a widget containing
a pre-generated help-card.

@related
    * [Houdini wiki markup|format]
    * [Documenting your assets|nodes]]]></helpText>
    <script scriptType="python"><![CDATA[import textwrap
import os
import os.path
import re
from PySide import QtCore
from PySide.QtGui import QDialog, QTextEdit, QTextOption, QVBoxLayout, QCursor


class TextDialog(QDialog):

    def __init__(self, message, parent=None):
        super(TextDialog, self).__init__(parent)
        
        self.setWindowTitle('Doc Builder')
        vertical_layout = QVBoxLayout()
        self.setLayout(vertical_layout)
        
        cursor_pos = QCursor.pos()
        self.setGeometry(cursor_pos.x(), cursor_pos.y(), 700, 800)


        text_edit = QTextEdit()
        text_edit.setReadOnly(True)
        text_edit.setWordWrapMode(QTextOption.NoWrap)
        text_edit.setPlainText(message)
        vertical_layout.addWidget(text_edit)
        
    def closeEvent(self, event):
        self.setParent(None)


def get_doc_str():
    indent = '    '
    node = None
    sel = hou.selectedNodes()
    if not sel:
        hou.ui.displayMessage('No node selected', severity=hou.severityType.Error)
        return None
    node = sel[-1]
    definition = node.type().definition()
    node_type = node.type()
    entries = definition.parmTemplateGroup().entriesWithoutFolders()
    result = ''
    if not definition:
        return
        
    result += '= {} =\n\n'.format(definition.description())
    
    context = node_type.category().name()
    if context == 'Driver':
        context = 'out'
    context = context.lower()
    _, namespace, internal, version = node_type.nameComponents()
    icon_dir = node_type.category().typeName()
    icon = os.path.join(icon_dir, internal)
    
    result += '#type: node\n'
    result += '#context: {}\n'.format(context.lower())
    result += '#internal: {}\n'.format(internal)
    result += '#icon: {}\n'.format(icon)
    result += '#version: {}\n\n'.format(version)
    
    result += '""" Short description of the node\'s purpose. """\n\n'
    
    result += '== Overview ==\n\n'
    result += 'Summary of what the node does.\n\n'

    if entries:
        result += '@parameters\n\n'
        
    for template in entries:
        if template.isHidden():
            continue
        elif not template.help():
            continue
        elif not template.label() or template.label() == '_':
            continue

        result += template.label() + ':\n'
        result += '{}#id: {}\n\n'.format(indent, template.name())
        help = template.help()
        help = help.replace('[', '`[').replace(']', ']`')
        result += textwrap.fill(help,
                                initial_indent=indent,
                                subsequent_indent=indent)
        result += '\n\n'
    result = result.strip()
    return result

doc_str = get_doc_str()
if doc_str:
    dialog = TextDialog(doc_str)
    dialog.setParent(hou.ui.mainQtWindow(), QtCore.Qt.Window)
    dialog.show()]]></script>
    <keywordList>
      <keyword>Doc Build</keyword>
    </keywordList>
  </tool>

  <tool name="csAddDescriptiveParm" label="csAddDescriptiveParm" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()

for node in nodes:
    descrparm = 'soho_descriptivename'
    if node.parm(descrparm):
        pass
    else:
        template = hou.StringParmTemplate('soho_descriptivename', 'Description', 1, '')
        node.addSpareParmTuple(template);

    if node.parm(descrparm).eval() is '':                
        if node.type().name()=='whKenobi':
            if node.parm('template').eval()=='shots_k.graphs.ManukaPassGraph':
                manuka_descr =  '`ifs(strcmp(chs("globals_4_2"), $OS)==0, "", chs("globals_4_2"))` `ch("f1")`-`ch("f2")` (`chs("globals_6_2")` res)'
                node.parm(descrparm).set(manuka_descr)
        else:
            print 'hell'
            
        
    
    
    
]]></script>
  </tool>

  <tool name="csAttribWrangle" label="csAttribWrangle" icon="SOP_attribwrangle">
    <script scriptType="python"><![CDATA[

nodes = hou.selectedNodes()
for node in nodes:
  wrangle_prefix = 'pts'
  in_geo = node.geometry()
  if in_geo.prims():
    if in_geo.prims()[0].type() in [hou.primType.Volume]:
      wrangle_prefix = 'vol'
    elif in_geo.prims()[0].type() in [hou.primType.VDB]:
      wrangle_prefix = 'vdb'
        
  outputs = list(node.outputConnections())
  wrangle = None
  if wrangle_prefix == 'pts':
      wrangle = node.createOutputNode('attribwrangle', '%s_' % wrangle_prefix)
  else:
      wrangle = node.createOutputNode('volumewrangle', '%s_' % wrangle_prefix)
 
  for con in outputs: 
    con.outputNode().setInput(con.inputIndex(), wrangle)
    
  wrangle.moveToGoodPosition()    
]]></script>
  </tool>

  <tool name="csToggleOutPane" label="Toggle /out" icon="VOP_switch">
    <script scriptType="python"><![CDATA[
import os
import toolutils 

panes = [ x for x in hou.ui.paneTabs() if x.type()==hou.paneTabType.NetworkEditor]
curpwd = panes[0].pwd().path()

if not "CSTOGGLEOUTPANE" in os.environ:
    os.environ['CSTOGGLEOUTPANE'] = curpwd

if curpwd!='/out':    
    os.environ['CSTOGGLEOUTPANE'] = curpwd
    panes[0].setPwd(hou.node('/out'))
else:    
    panes[0].setPwd(hou.node(os.environ['CSTOGGLEOUTPANE']))
]]></script>
  </tool>

  <tool name="csToggleDisplayDependencies" label="Togge Display Dependencies" icon="VOP_switch">
    <script scriptType="python"><![CDATA[panes = [x for x in hou.ui.paneTabs() if x.type()==hou.paneTabType.NetworkEditor and x.isCurrentTab()]
if panes:
  for pane in panes:
    val = int(pane.getPref('showdep'))
    val = 2 if val < 2 else 0
    pane.setPref('showdep', str(val))
    pane.flashMessage('$HFS/houdini/help/icons/DIALOG/important.svg', 'Displaying%s Dependencies' % ('' if val else ' No'), 1)
]]></script>
  </tool>

  <tool name="cs_alt" label="cs_alt" icon="SOP_wiretransfershape">
    <script scriptType="python"><![CDATA[
import cstools

cstools.run(alt_mode=True)]]></script>
  </tool>
</shelfDocument>
