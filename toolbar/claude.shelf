<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="shelf_claude" label="Claude">
    <memberTool name="cs"/>
    <memberTool name="cs_alt"/>
    <memberTool name="csAttribWrangle"/>
    <memberTool name="csToggleColorSettings"/>
    <memberTool name="csToggleOutPane"/>
    <memberTool name="csToggleDisplayDependencies"/>
    <memberTool name="srnd_docbuild0"/>
    <memberTool name="csBubbleUpTakeParms"/>
    <memberTool name="csDumpParms"/>
    <memberTool name="csSetVisualizeNode"/>
  </toolshelf>

  <tool name="csAttribWrangle" label="attr wrangle" icon="SOP_attribwrangle">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
for node in nodes:
  wrangle_prefix = 'pts'
  in_geo = node.geometry()
  if in_geo.prims():
    if in_geo.prims()[0].type() in [hou.primType.Volume]:
      wrangle_prefix = 'vol'
    elif in_geo.prims()[0].type() in [hou.primType.VDB]:
      wrangle_prefix = 'vdb'
        
  outputs = list(node.outputConnections())
  wrangle = None
  if wrangle_prefix == 'pts':
      wrangle = node.createOutputNode('attribwrangle', '%s_' % wrangle_prefix)
  else:
      wrangle = node.createOutputNode('volumewrangle', '%s_' % wrangle_prefix)
 
  for con in outputs: 
    con.outputNode().setInput(con.inputIndex(), wrangle)
    
  wrangle.moveToGoodPosition()
 ]]></script>
  </tool>

  <tool name="cs" label="cs" icon="SOP_wiretransfershape">
    <script scriptType="python"><![CDATA[import cstools

reload(cstools)
reload(cstools.std)
reload(cstools.alt)
reload(cstools.colors)

cstools.run()
]]></script>
    <keywordList>
      <keyword>cstool</keyword>
    </keywordList>
  </tool>

  <tool name="cs_alt" label="cs (a)" icon="SOP_wiretransfershape">
    <script scriptType="python"><![CDATA[import cstools

cstools.run(alt_mode=True)]]></script>
    <keywordList>
      <keyword>cstool</keyword>
    </keywordList>
  </tool>

  <tool name="csToggleColorSettings" label="toggle color" icon="COP2_lookup">
    <script scriptType="python"><![CDATA[
if hou.hscript("colorsettings -D -p")[0].split('\n')[2].split('=')[1].strip()== '""':
    hou.hscript('colorsettings -A -p -v -f -g 1 -l "/vol/weta/luts/DigiSX_houdini.lut"')
else:
    hou.hscript('colorsettings -A -p -v -f -g 1 -l ""')]]></script>
  </tool>

  <tool name="csToggleOutPane" label="toggle /out" icon="VOP_switch">
    <script scriptType="python"><![CDATA[import os
import toolutils 

panes = [ x for x in hou.ui.paneTabs() if x.type()==hou.paneTabType.NetworkEditor]
curpwd = panes[0].pwd().path()

if not "CSTOGGLEOUTPANE" in os.environ:
    os.environ['CSTOGGLEOUTPANE'] = curpwd

if curpwd!='/out':    
    os.environ['CSTOGGLEOUTPANE'] = curpwd
    panes[0].setPwd(hou.node('/out'))
else:    
    panes[0].setPwd(hou.node(os.environ['CSTOGGLEOUTPANE']))
]]></script>
  </tool>

  <tool name="csToggleDisplayDependencies" label="toggle depends" icon="VOP_switch">
    <script scriptType="python"><![CDATA[
panes = [x for x in hou.ui.paneTabs() if x.type()==hou.paneTabType.NetworkEditor and x.isCurrentTab()]
if panes:
  for pane in panes:
    val = int(pane.getPref('showdep'))
    val = 2 if val < 2 else 0
    pane.setPref('showdep', str(val))
    pane.flashMessage('$HFS/houdini/help/icons/DIALOG/important.svg', 'Displaying%s Dependencies' % ('' if val else ' No'), 1) 
    ]]></script>
  </tool>

  <tool name="srnd_docbuild0" label="Doc Build" icon="MISC_tutorials">
    <script scriptType="python"><![CDATA[]]></script>
  </tool>

  <tool name="srnd_docbuild" label="Doc Build" icon="MISC_tutorials">
    <helpText><![CDATA[= Doc Build =

#type: shelf
#internal: docbuild
#icon: MISC/tutorials

""" Quick way to generate help cards for hdas. """

== Overview ==

Select The node you want to generate a help-card for,
then click this tool to launch a widget containing
a pre-generated help-card.

@related
    * [Houdini wiki markup|format]
    * [Documenting your assets|nodes]
]]></helpText>
    <script scriptType="python"><![CDATA[
import textwrap
import os
import os.path
import re
from PySide import QtCore
from PySide.QtGui import QDialog, QTextEdit, QTextOption, QVBoxLayout, QCursor


class TextDialog(QDialog):

    def __init__(self, message, parent=None):
        super(TextDialog, self).__init__(parent)
        
        self.setWindowTitle('Doc Builder')
        vertical_layout = QVBoxLayout()
        self.setLayout(vertical_layout)
        
        cursor_pos = QCursor.pos()
        self.setGeometry(cursor_pos.x(), cursor_pos.y(), 700, 800)


        text_edit = QTextEdit()
        text_edit.setReadOnly(True)
        text_edit.setWordWrapMode(QTextOption.NoWrap)
        text_edit.setPlainText(message)
        vertical_layout.addWidget(text_edit)
        
    def closeEvent(self, event):
        self.setParent(None)


def get_doc_str():
    indent = '    '
    node = None
    sel = hou.selectedNodes()
    if not sel:
        hou.ui.displayMessage('No node selected', severity=hou.severityType.Error)
        return None
    node = sel[-1]
    definition = node.type().definition()
    node_type = node.type()
    entries = definition.parmTemplateGroup().entriesWithoutFolders()
    result = ''
    if not definition:
        return
        
    result += '= {} =\n\n'.format(definition.description())
    
    context = node_type.category().name()
    if context == 'Driver':
        context = 'out'
    context = context.lower()
    _, namespace, internal, version = node_type.nameComponents()
    icon_dir = node_type.category().typeName()
    icon = os.path.join(icon_dir, internal)
    
    result += '#type: node\n'
    result += '#context: {}\n'.format(context.lower())
    result += '#internal: {}\n'.format(internal)
    result += '#icon: {}\n'.format(icon)
    result += '#version: {}\n\n'.format(version)
    
    result += '""" Short description of the node\'s purpose. """\n\n'
    
    result += '== Overview ==\n\n'
    result += 'Summary of what the node does.\n\n'

    if entries:
        result += '@parameters\n\n'
        
    for template in entries:
        if template.isHidden():
            continue
        elif not template.help():
            continue
        elif not template.label() or template.label() == '_':
            continue

        result += template.label() + ':\n'
        result += '{}#id: {}\n\n'.format(indent, template.name())
        help = template.help()
        help = help.replace('[', '`[').replace(']', ']`')
        result += textwrap.fill(help,
                                initial_indent=indent,
                                subsequent_indent=indent)
        result += '\n\n'
    result = result.strip()
    return result

doc_str = get_doc_str()
if doc_str:
    dialog = TextDialog(doc_str)
    dialog.setParent(hou.ui.mainQtWindow(), QtCore.Qt.Window)
    dialog.show()
    ]]></script>
  </tool>

  <tool name="csBubbleUpTakeParms" label="csBubbleUpTakeParms" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[panes = [x for x in hou.ui.paneTabs() if x.type()==hou.paneTabType.NetworkEditor and x.isCurrentTab()]

if hou.takes.currentTake() != hou.takes.rootTake():
    parms = [[x, x.eval()] for x in hou.takes.currentTake().parmTuples()]
    
    curname = hou.takes.currentTake().name()
    
    hou.takes.setCurrentTake( hou.takes.rootTake() )
    
    for parm in parms:
        parm[0].set( parm[1] )
        
    for pane in panes:
        pane.flashMessage('$HFS/houdini/help/icons/DIALOG/important.svg', 'Set parameters from: %s' % curname, 2)
        
else:
    for pane in panes:
        pane.flashMessage('$HFS/houdini/help/icons/DIALOG/important.svg','Main take active. Doing nothing.', 2)
                                                                                                                 ]]></script>
  </tool>

  <tool name="csDumpParms" label="csDumpParms" icon="SOP_font">
    <script scriptType="python"><![CDATA[import json

nodes = hou.selectedNodes()


for node in nodes:
    print node.name()
    filename = "/usr/home/cschitter/%s.txt"%node.name()
    p = [[x.name(),x.eval()] for x in node.parms()]
    p = sorted(p, key=lambda parm: parm[0])       
    with open(filename, "w") as f:
        for i in p:            
            f.write('%s: %s\n'%(i[0], i[1]))
    print '%s -> %s'%(node.name(),filename)
                                             ]]></script>
  </tool>

  <tool name="csSetVisualizeNode" label="csSetVisualizeNode" icon="SOP_visualize">
    <script scriptType="python"><![CDATA[
nodes = hou.selectedNodes()

for node in nodes:
    print node.name(), node.type().name(),  node.color()
    print kwargs
    col = hou.Color()
    col.setRGB((0.4, 0.8, 1.0))
    node.setColor( col ) 
]]></script>
  </tool>
</shelfDocument>
